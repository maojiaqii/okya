spring.custom.datasource.name=mjq

spring.custom.datasource.mjq.driver-class-name = com.mysql.jdbc.Driver
spring.custom.datasource.mjq.url=jdbc:mysql://101.132.122.164:3306/mdb?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&useSSL=false
spring.custom.datasource.mjq.username=maria
spring.custom.datasource.mjq.password=123456

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=100
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.maxLifeTime=3600000
spring.datasource.validationQuery=SELECT 1
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 每隔1小时检查数据库连接是否有效，连接成功1分钟后开始计时
spring.datasource.removeAbandonedTimeout=3600
# 如果连接失效就删重连
spring.datasource.removeAbandoned=true
# 删除时输出日志
spring.datasource.logAbandoned=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true